# Polynomial Plot

Below are the steps I took to complete the first part of EVR-5086 Assignment 1.

In doing this exercise in R, I started by loading the R libraries I will use in this chapter. I used {ggplot2} for plotting, and {tidyr} and {dplyr} for data wrangling [@ggplot2, @tidyverse].

```{r message=FALSE}
# load libraries
library(ggplot2)
library(tidyr)
library(dplyr)

```

Next, I defined the variables and created the vectors I will need for the plot.

```{r}
# Define variables
a <- 1
n <- 1
b <- 1
p <- 2
c <- 1
q <- 3

# Create x vectors from -1 to 1
x <- seq(from = -1, to = 1, by = 0.1)

# Calculate the value of y for each value of x
y <- (a * (x^n)) + (b * (x^p)) + (c * (x^q))

# Calculate the analytical derivatives for each value of x
dy_dx <- (a * n * (x^(n - 1))) + (b * p * (x^(p - 1))) + (c * q * (x^(q-1)))

# Calculate the numerical derivatives
deltay <- diff(y)
deltax <- diff(x)
deltay_deltax <- deltay / deltax

# For plotting purposes, derive the midpoint
deltax_vec <- x[-length(x)] + deltax/2
```

My next goal was to unite all of the vectors into a long data format. I did this by creating a data frame, then pivoting the data to only have the values that will be plotted on the x and y axis, as well as a label identifying that I will use to define colors, shapes, and line types.

```{r}
# Build data frames for plot
plot_prep <- data.frame(x, y, dy_dx) |>
  dplyr::rename(Polynomial = y,
                "Analytical derivative" = dy_dx)

# Wrangle for ggplot
plot_tidy <- plot_prep |>
  tidyr::pivot_longer(!x, names_to = "linetype", values_to = "y") |>
  dplyr::bind_rows(
    data.frame(x = deltax_vec, y = deltay_deltax, linetype = "Numerical derivative")
  )
```

Lastly, I create the plot and reflect on the observations and limitations of the numerical derivative.

@fig-polynomial shows that the numerical derivative, shown as red open circles, is very similar to the analytical derivative, shown as a blue solid line. The good match we see relates to the scale over which we calculated the numerical derivative compared to the scale of the rate of change in the polynomial. When calculating the numerical derivative we can get the average rate of change between two points.

Note that for the analytical derivative we are only providing the plot with information associated with x values ranging -1 to 1, in steps of 0.1. Meanwhile, the numerical derivative is plotted at the midpoints of our original segments (x values goes from -0.95 to 0.95). Including the numerical derivatives in the appropriate position relative to the curved lines plotted between our analytical derivatives results in an overlay of the points and the line.

If the numerical derivative had a much courser resolution (e.g. just -1 and 1), it would not match well, and would be just one point above the "U" shape of the analytical derivative at x = 0. Although that course spacing is a extreme, it helps to emphasize that "grid spacing and position of the computed derivative need to be considered".

```{r}
#| label: fig-polynomial
#| fig-cap: Plot of the polynomial defined by the values provided in EVR-5086 Assignement 1. 

# Plot the analytically derivative as a solid line and the numerical derivative as open symbols
polynomial_plot <- ggplot(data = plot_tidy, aes(x = x, y = y, color = linetype)) +
  geom_point(data = filter(plot_tidy, linetype == "Numerical derivative"), shape = 21, stroke = 1.25) +
  geom_line(data = filter(plot_tidy, linetype != "Numerical derivative")) +
  theme(legend.title = element_blank()) +
  scale_color_manual(values = c(4, 2, 1))

polynomial_plot

```
