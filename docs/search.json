[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EVR-5086 Assignment 1 - Calculus Review",
    "section": "",
    "text": "Introduction\nI learned that there are various ways that I can create and execute Python chunks in R Studio (Velásquez 2021). Although EVR-5086 class is being taught using python, I have years of experience using R that I hope will be complementary to some of the python I learn to use course. I am also fond of sharing my work on GitHub. I have learned how GitHub pages combined with Quarto and R Studio are an extraordinary resource for developing and maintaining lab notebooks. In order to get better at using these tools (and the reproducibility and accessibility of my future research) I have created a html quarto book and pdf to show my work associated with the course assignments.\n\n\nSet Up\nI started by creating a GitHub account (arios101-fiu) and a GitHub repository with a gitignore and readme.md (EVR-5086-Assignment1). I cloned the repository into R Studio, thereby creating a R project. I copied in a _quarto.yml and index file from another project. I simplified the index file and inserted a reference to create a new reference.bib. I updated the yml, rendered, committed and pushed. Next, I turned on GitHub pages and updated the URLs in the yml and repository. On to the assignment…\n\n\n\n\nVelásquez, Isabella. 2021. “Posit.” https://www.posit.co/.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "polynomial.html",
    "href": "polynomial.html",
    "title": "1  Polynomial Plot",
    "section": "",
    "text": "Below are the steps I took to complete the first part of EVR-5086 Assignment 1.\nIn doing this exercise in R, I started by loading the R libraries I will use in this chapter. I used {ggplot2} for plotting, and {tidyr} and {dplyr} for data wrangling Wickham et al. (2019).\n\n# load libraries\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\n\nNext, I defined the variables and created the vectors I will need for the plot.\n\n# Define variables\na &lt;- 1\nn &lt;- 1\nb &lt;- 1\np &lt;- 2\nc &lt;- 1\nq &lt;- 3\n\n# Create x vectors from -1 to 1\nx &lt;- seq(from = -1, to = 1, by = 0.1)\n\n# Calculate the value of y for each value of x\ny &lt;- (a * (x^n)) + (b * (x^p)) + (c * (x^q))\n\n# Calculate the analytical derivatives for each value of x\ndy_dx &lt;- (a * n * (x^(n - 1))) + (b * p * (x^(p - 1))) + (c * q * (x^(q-1)))\n\n# Calculate the numerical derivatives\ndeltay &lt;- diff(y)\ndeltax &lt;- diff(x)\ndeltay_deltax &lt;- deltay / deltax\n\n# For plotting purposes, derive the midpoint\ndeltax_vec &lt;- x[-length(x)] + deltax/2\n\nMy next goal was to unite all of the vectors into a long data format. I did this by creating a data frame, then pivoting the data to only have the values that will be plotted on the x and y axis, as well as a label identifying that I will use to define colors, shapes, and line types.\n\n# Build data frames for plot\nplot_prep &lt;- data.frame(x, y, dy_dx) |&gt;\n  dplyr::rename(Polynomial = y,\n                \"Analytical derivative\" = dy_dx)\n\n# Wrangle for ggplot\nplot_tidy &lt;- plot_prep |&gt;\n  tidyr::pivot_longer(!x, names_to = \"linetype\", values_to = \"y\") |&gt;\n  dplyr::bind_rows(\n    data.frame(x = deltax_vec, y = deltay_deltax, linetype = \"Numerical derivative\")\n  )\n\nLastly, I create the plot and reflect on the observations and limitations of the numerical derivative.\nFigure 1.1 shows that the numerical derivative, shown as red open circles, is very similar to the analytical derivative, shown as a blue solid line. The good match we see relates to the scale over which we calculated the numerical derivative compared to the scale of the rate of change in the polynomial. When calculating the numerical derivative we can get the average rate of change between two points.\nNote that for the analytical derivative we are only providing the plot with information associated with x values ranging -1 to 1, in steps of 0.1. Meanwhile, the numerical derivative is plotted at the midpoints of our original segments (x values goes from -0.95 to 0.95). Including the numerical derivatives in the appropriate position relative to the curved lines plotted between our analytical derivatives results in an overlay of the points and the line.\nIf the numerical derivative had a much courser resolution (e.g. just -1 and 1), it would not match well, and would be just one point above the “U” shape of the analytical derivative at x = 0. Although that course spacing is a extreme, it helps to emphasize that “grid spacing and position of the computed derivative need to be considered”.\n\n# Plot the analytically derivative as a solid line and the numerical derivative as open symbols\npolynomial_plot &lt;- ggplot(data = plot_tidy, aes(x = x, y = y, color = linetype)) +\n  geom_point(data = filter(plot_tidy, linetype == \"Numerical derivative\"), shape = 21, stroke = 1.25) +\n  geom_line(data = filter(plot_tidy, linetype != \"Numerical derivative\")) +\n  theme(legend.title = element_blank()) +\n  scale_color_manual(values = c(4, 2, 1))\n\npolynomial_plot\n\n\n\n\n\n\n\nFigure 1.1: Plot of the polynomial defined by the values provided in EVR-5086 Assignement 1.\n\n\n\n\n\n\n\n\n\nWickham, Hadley. 2016. “Ggplot2: Elegant Graphics for Data Analysis.” https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the Tidyverse” 4: 1686. https://doi.org/10.21105/joss.01686.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Polynomial Plot</span>"
    ]
  },
  {
    "objectID": "tripole.html",
    "href": "tripole.html",
    "title": "2  Solve the 2-D Laplace in Excel",
    "section": "",
    "text": "I created a 29 by 29 grid of the 2-D Laplace Equation. I included three internal “boundary values”; one high value of 4 and two low values of -2 and -3. I allowed excel to iteratively calculate with 10,000 iterations and a minimum change of 0.0001. Saving as a CSV file, surrounded by explicit zeros, the dimensions of my data were 30 by 30. Additionally, I rounded to four significant digits to see if it would mean that the stagnation areas would be more pronounced.\n\n3 Read in and plot contours\n\n\n4 Plot streamlines",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Solve the 2-D Laplace in Excel</span>"
    ]
  }
]